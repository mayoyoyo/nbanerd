[{"/Users/Hanson/work/nbastats/src/index.js":"1","/Users/Hanson/work/nbastats/src/App.js":"2","/Users/Hanson/work/nbastats/src/reportWebVitals.js":"3"},{"size":500,"mtime":1608262894705,"results":"4","hashOfConfig":"5"},{"size":13642,"mtime":1608321185148,"results":"6","hashOfConfig":"5"},{"size":362,"mtime":1608262894709,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"7157i8",{"filePath":"11","messages":"12","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"13"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"/Users/Hanson/work/nbastats/src/index.js",[],["16","17"],"/Users/Hanson/work/nbastats/src/App.js",["18","19","20","21"],"import React, { Component } from \"react\";\nimport axios from \"axios\"; // import axios for handling HTTP requests\nimport \"bootstrap/dist/css/bootstrap.min.css\"; // import BootStrap\nimport backgroundImage from \"./bg.png\"; // import background image\nimport \"./App.css\"; // import custom CSS\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      playerFound: false, // boolean noting whether player is found\n      yearFound: false, // boolean noting whether stat year is found\n      id: null, // player ID in API\n      name: null, // player name\n      year: null, // stat year\n      info: {}, // player information\n      teaminfo: {}, // player team information\n      stats: {}, // player year stats\n    };\n\n    // NBA team primary colors\n    this.TEAM_COLORS = {\n      ATL: \"#E03A3E\",\n      BOS: \"#007A33\",\n      BKN: \"#000000\",\n      CHA: \"#1D1160\",\n      CHI: \"#000000\",\n      CLE: \"#860038\",\n      DAL: \"#00538C\",\n      DEN: \"#1D428A\",\n      DET: \"#C8102E\",\n      GSW: \"#1D428A\",\n      HOU: \"#CE1141\",\n      IND: \"#002D62\",\n      LAC: \"#C8102E\",\n      LAL: \"#552583\",\n      MEM: \"#12173F\",\n      MIA: \"#000000\",\n      MIL: \"#00471B\",\n      MIN: \"#0C2340\",\n      NOP: \"#0C2340\",\n      NYK: \"#006BB6\",\n      OKC: \"#EF3B24\",\n      ORL: \"#C4CED4\",\n      PHI: \"#ED174C\",\n      PHX: \"#1D1160\",\n      POR: \"#000000\",\n      SAC: \"#63727A\",\n      SAS: \"#000000\",\n      TOR: \"#CE1141\",\n      UTA: \"#002B5C\",\n      WAS: \"#002B5C\",\n    };\n    // NBA team secondary colors\n    this.TEAM_COLORS2 = {\n      ATL: \"#C1D32F\",\n      BOS: \"#BA9653\",\n      BKN: \"#C6CFD4\",\n      CHA: \"#00788C\",\n      CHI: \"#CE1141\",\n      CLE: \"#FDBB30\",\n      DAL: \"#B8C4CA\",\n      DEN: \"#FEC524\",\n      DET: \"#1D42BA\",\n      GSW: \"#FFC72C\",\n      HOU: \"#C4CED4\",\n      IND: \"#FDBB30\",\n      LAC: \"#1D428A\",\n      LAL: \"#FDB927\",\n      MEM: \"#5D76A9\",\n      MIA: \"#98002E\",\n      MIL: \"#EEE1C6\",\n      MIN: \"#236192\",\n      NOP: \"#C8102E\",\n      NYK: \"#F58426\",\n      OKC: \"#007AC1\",\n      ORL: \"#0077C0\",\n      PHI: \"#006BB6\",\n      PHX: \"#E56020\",\n      POR: \"#E03A3E\",\n      SAC: \"#5A2D81\",\n      SAS: \"#C4CED4\",\n      TOR: \"#000000\",\n      UTA: \"#F9A01B\",\n      WAS: \"#E31837\",\n    };\n  }\n\n  // function obtaining the search results of current query\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.getPlayerId(); // search for player ID\n  };\n\n  // function updating the value of player search query\n  handleChange = (event) => {\n    // API needs spaces to be replaced with underscores\n    const query = event.target.value.split(\" \").join(\"_\");\n    if (query.length > 0) {\n      this.setState({ name: query });\n    }\n  };\n\n  // function obtaining player ID from name search\n  getPlayerId = () => {\n    // make HTTP request to API\n    axios\n      .get(\n        `https://www.balldontlie.io/api/v1/players?search=${this.state.name}`\n      )\n      .then(async (response) => {\n        // if search is successful\n        if (response.data.data.length > 0) {\n          // call getInfo function with player ID\n          await this.getInfo(response.data.data[0].id);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // function for obtaining random player\n  getRandom = () => {\n    // make HTTP request to API for all players\n    axios\n      .get(`https://www.balldontlie.io/api/v1/players`)\n      .then(async (response) => {\n        if (response.data.data.length > 0) {\n          const totalPages = response.data.meta.total_pages; // number of pages of players\n          // generate random page index from 1 to totalPages\n          const index = Math.floor(Math.random() * totalPages) + 1;\n          // call getRandomID function with random page index\n          await this.getRandomId(index);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // helper function to getRandom that finds random player ID in page\n  getRandomId = (index) => {\n    // make HTTP request to API for all players in page index\n    axios\n      .get(`https://www.balldontlie.io/api/v1/players?page=${index}`)\n      .then(async (response) => {\n        if (response.data.data.length > 0) {\n          const numEntries = response.data.data.length; // number of players in page\n          // generate random player index\n          const playerIndex = Math.floor(Math.random() * numEntries);\n          // call getInfo function with player ID\n          await this.getInfo(response.data.data[playerIndex].id);\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // function for obtaining player information\n  getInfo = (playerId) => {\n    // make HTTP request to API for player with input ID\n    axios\n      .get(`https://www.balldontlie.io/api/v1/players/${playerId}`)\n      .then(async (response) => {\n        this.setState({ id: playerId }); // populate id field\n        this.setState({ playerFound: true }); // mark as player found\n        this.setState({ yearFound: false }); // mark as year not yet found\n        this.setState({ info: response.data }); // populate info field\n        this.setState({ teaminfo: response.data.team }); // populate teaminfo field\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // function obtaining the year stats of current query\n  handleSubmitYear = (event) => {\n    event.preventDefault();\n    this.getStats(); // search for year in the player's stats\n  };\n\n  // function updating the value of year query\n  handleChangeYear = (event) => {\n    const query = event.target.value;\n    if (query.length > 0) {\n      this.setState({ year: query });\n    }\n  };\n\n  // function obtaining player's year stats\n  getStats = () => {\n    // make HTTP request to API with year and player ID (already populated)\n    axios\n      .get(\n        `https://www.balldontlie.io/api/v1/season_averages?season=${this.state.year}&player_ids[]=${this.state.id}`\n      )\n      .then(async (response) => {\n        if (response.data.data.length > 0) {\n          this.setState({ stats: response.data.data[0] }); // populate stats field\n          this.setState({ yearFound: true }); // mark year as found\n        }\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  // render loop\n  render() {\n    // welcome blurb\n    const welcome = (\n      <div>\n        <div className=\"credits\">\n          <div className=\"col-sm\">\n            Welcome to NBA Nerd! Search for your favorite NBA players in history\n            or discover random players you never knew existed. Find that\n            player's advanced stats from any valid season from 1979. 2020-21\n            season stats will be updated every 10 minutes once games begin.\n            <br /> <br />\n            Note that some players may not have positions and/or measurements\n            listed.\n          </div>\n        </div>\n      </div>\n    );\n    const infoResults = (\n      <div>\n        <div className=\"card\">\n          <div\n            className=\"name\"\n            style={{\n              borderColor: `${\n                this.TEAM_COLORS[this.state.teaminfo.abbreviation]\n              }`,\n            }}\n          >\n            {this.state.info.first_name} {this.state.info.last_name}\n          </div>\n          <div\n            className=\"container\"\n            style={{\n              backgroundColor: `${\n                this.TEAM_COLORS2[this.state.teaminfo.abbreviation]\n              }`,\n            }}\n          >\n            <div className=\"row\">\n              <div className=\"col-sm\">\n                <div className=\"roundedBox\">\n                  TEAM\n                  <br />\n                  {this.state.teaminfo[\"full_name\"]}\n                </div>\n              </div>\n              <div className=\"col-sm\">\n                <div className=\"roundedBox\">\n                  POSITION\n                  <br />\n                  {this.state.info[\"position\"]}\n                </div>\n              </div>\n              <div className=\"col-sm\">\n                <div className=\"roundedBox\">\n                  HEIGHT: {this.state.info[\"height_feet\"]}'{\" \"}\n                  {this.state.info[\"height_inches\"]}\"\n                  <br />\n                  WEIGHT: {this.state.info[\"weight_pounds\"]}lb\n                </div>\n              </div>\n            </div>\n          </div>\n          <form className=\"year\" onSubmit={this.handleSubmitYear}>\n            <label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                onChange={this.handleChangeYear}\n                placeholder=\"Search Stats Year\"\n              />\n            </label>\n          </form>\n        </div>\n      </div>\n    );\n    const yearResults = (\n      <div>\n        <div className=\"card\">\n          <div\n            className=\"name\"\n            style={{\n              borderColor: `${\n                this.TEAM_COLORS[this.state.teaminfo.abbreviation]\n              }`,\n            }}\n          >\n            {this.state.stats[\"season\"]}-\n            {parseInt(this.state.stats[\"season\"]) + 1} Statistics\n          </div>\n          <div\n            className=\"container\"\n            style={{\n              backgroundColor: `${\n                this.TEAM_COLORS2[this.state.teaminfo.abbreviation]\n              }`,\n            }}\n          >\n            <div className=\"row\">\n              <div className=\"col-sm\">\n                <div className=\"roundedBox\">\n                  BASIC STATS\n                  <br />\n                  <br />\n                  PPG: {this.state.stats[\"pts\"]} points\n                  <br />\n                  APG: {this.state.stats[\"ast\"]} assists\n                  <br />\n                  RPG: {this.state.stats[\"reb\"]} rebounds\n                  <br />\n                  STL: {this.state.stats[\"stl\"]} steals\n                  <br />\n                  BLK: {this.state.stats[\"blk\"]} blocks\n                  <br />\n                  TO: {this.state.stats[\"turnover\"]} turnovers\n                </div>\n              </div>\n              <div className=\"col-sm\">\n                <div className=\"roundedBox\">\n                  SHOOTING SPLITS\n                  <br />\n                  <br />\n                  FG%:{\" \"}\n                  {(parseFloat(this.state.stats[\"fg_pct\"]) * 100).toFixed(1)}%\n                  <br />\n                  3PT%:{\" \"}\n                  {(parseFloat(this.state.stats[\"fg3_pct\"]) * 100).toFixed(1)}%\n                  <br />\n                  FT%:{\" \"}\n                  {(parseFloat(this.state.stats[\"ft_pct\"]) * 100).toFixed(1)}%\n                  <br />\n                  FG (m/a): {this.state.stats[\"fgm\"]} /{\" \"}\n                  {this.state.stats[\"fga\"]}\n                  <br />\n                  3PT (m/a): {this.state.stats[\"fg3m\"]} /{\" \"}\n                  {this.state.stats[\"fg3a\"]}\n                  <br />\n                  FT (m/a): {this.state.stats[\"ftm\"]} /{\" \"}\n                  {this.state.stats[\"fta\"]}\n                </div>\n              </div>\n              <div className=\"col-sm\">\n                <div className=\"roundedBox\">\n                  ADVANCED STATS\n                  <br />\n                  <br />\n                  GP: {this.state.stats[\"games_played\"]} games\n                  <br />\n                  MPG: {this.state.stats[\"min\"]} mins\n                  <br />\n                  PF: {this.state.stats[\"pf\"]} fouls\n                  <br />\n                  DReb: {this.state.stats[\"dreb\"]} def reb\n                  <br />\n                  OReb: {this.state.stats[\"oreb\"]} off reb\n                  <br />\n                  eFG%:{\" \"}\n                  {(\n                    ((parseFloat(this.state.stats[\"fgm\"]) +\n                      0.5 * parseFloat(this.state.stats[\"fg3m\"])) /\n                      parseFloat(this.state.stats[\"fga\"])) *\n                    100\n                  ).toFixed(1)}\n                  %\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n\n    return (\n      <div className=\"App\" style={{ background: `url(${backgroundImage})` }}>\n        <div className=\"header\">\n          <button\n            type=\"button\"\n            className=\"btn-primary\"\n            onClick={this.getRandom}\n          >\n            Random Player\n          </button>\n          <img\n            className=\"logo\"\n            src=\"https://i.ibb.co/Kys5Fjw/logo.png\"\n            onClick={() => window.location.reload()}\n          />\n          <form className=\"searchbar\" onSubmit={this.handleSubmit}>\n            <label>\n              <input\n                className=\"form-control\"\n                type=\"text\"\n                onChange={this.handleChange}\n                placeholder=\"Search Player\"\n              />\n            </label>\n          </form>\n        </div>\n        {this.state.playerFound ? infoResults : welcome}\n        {this.state.yearFound ? yearResults : null}\n        <div className=\"card\">\n          {\" \"}\n          <div className=\"credits\">\n            <div className=\"col-sm\">Developed by Hanson Kang </div>\n            <div className=\"col-sm\">\n              Powered by{\" \"}\n              <a href=\"https://reactjs.org/\" target=\"_blank\">\n                React\n              </a>{\" \"}\n              and{\" \"}\n              <a href=\"https://www.balldontlie.io/\" target=\"_blank\">\n                balldontlie API\n              </a>\n            </div>\n            <div className=\"col-sm\">\n              <a href=\"https://github.com/mayoyoyo/nbastats\" target=\"_blank\">\n                Source code\n              </a>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","/Users/Hanson/work/nbastats/src/reportWebVitals.js",[],{"ruleId":"22","replacedBy":"23"},{"ruleId":"24","replacedBy":"25"},{"ruleId":"26","severity":1,"message":"27","line":393,"column":11,"nodeType":"28","endLine":397,"endColumn":13},{"ruleId":"29","severity":1,"message":"30","line":417,"column":46,"nodeType":"31","endLine":417,"endColumn":61},{"ruleId":"29","severity":1,"message":"30","line":421,"column":53,"nodeType":"31","endLine":421,"endColumn":68},{"ruleId":"29","severity":1,"message":"30","line":426,"column":62,"nodeType":"31","endLine":426,"endColumn":77},"no-native-reassign",["32"],"no-negated-in-lhs",["33"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","no-global-assign","no-unsafe-negation"]